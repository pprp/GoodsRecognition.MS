# Copyright 2021 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
import argparse
import os
import time
import glob
import numpy as np
from tabulate import tabulate
from score import SegmentationMetric

## Params
parser = argparse.ArgumentParser()
parser.add_argument('--label_path', type=str
                    , help='directory of dataset label')
parser.add_argument('--output_path', default='', type=str,
                    help='path of the predict files that generated by the model')
parser.add_argument('--image_width', default=768, type=int, help='image_width')
parser.add_argument('--image_height', default=768, type=int, help='image_height')
parser.add_argument('--save_mask', default=0, type=int, help='0 for False, 1 for True')

args = parser.parse_args()

cityspallete = [
    128, 64, 128,
    244, 35, 232,
    70, 70, 70,
    102, 102, 156,
    190, 153, 153,
    153, 153, 153,
    250, 170, 30,
    220, 220, 0,
    107, 142, 35,
    152, 251, 152,
    0, 130, 180,
    220, 20, 60,
    255, 0, 0,
    0, 0, 142,
    0, 0, 70,
    0, 60, 100,
    0, 80, 100,
    0, 0, 230,
    119, 11, 32,
]
classes = ('road', 'sidewalk', 'building', 'wall', 'fence', 'pole', 'traffic light',
           'traffic sign', 'vegetation', 'terrain', 'sky', 'person', 'rider', 'car',
           'truck', 'bus', 'train', 'motorcycle', 'bicycle')
def cal_mIoU(label_path, output_path, image_width, image_height, save_mask):
    file_list = glob.glob(label_path+'*') # label_path must end by '/'

    start_time = time.time()
    metric = SegmentationMetric(19)
    metric.reset()
    index = 0
    for file in file_list:
        label = np.fromfile(file, dtype=np.int32)
        label = label.reshape(image_height, image_width)

        filename = file.split(os.sep)[-1][:-10]    # get the name of image file
        predict_path = os.path.join(output_path, filename+"_img_0.bin")
        predict = np.fromfile(predict_path, dtype=np.float32)
        predict = predict.reshape(1, 19, image_height, image_width)
        metric.update(predict, label)
        pixAcc, mIoU = metric.get()
        print("[EVAL] Sample: {:d}, pixAcc: {:.3f}, mIoU: {:.3f}".format(index + 1, pixAcc * 100, mIoU * 100))
        index += 1

        if save_mask == 1:
            output = np.argmax(predict[0], axis=0)
            out_img = Image.fromarray(output.astype('uint8'))
            out_img.putpalette(cityspallete)
            outname = str(index) + '.png'
            out_img.save(os.path.join(output_path, outname))


    pixAcc, mIoU, category_iou = metric.get(return_category_iou=True)
    print('End validation pixAcc: {:.3f}, mIoU: {:.3f}'.format(pixAcc * 100, mIoU * 100))
    txtName = os.path.join(output_path, "eval_results.txt")
    with open(txtName, "w") as f:
        string = 'validation pixAcc:' + str(pixAcc * 100) + ', mIoU:' + str(mIoU * 100)
        f.write(string)
        f.write('\n')
        headers = ['class id', 'class name', 'iou']
        table = []
        for i, cls_name in enumerate(classes):
            table.append([cls_name, category_iou[i]])
            string = 'class name: ' + cls_name + ' iou: ' + str(category_iou[i]) + '\n'
            f.write(string)
        print('Category iou: \n {}'.format(tabulate(table, headers, \
                               tablefmt='grid', showindex="always", numalign='center', stralign='center')))
    time_used = time.time() - start_time
    print("Time cost:"+str(time_used)+" seconds!")

if __name__ == '__main__':
    cal_mIoU(args.label_path, args.output_path, args.image_width, args.image_height, args.save_mask)
